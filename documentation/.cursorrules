# .cursorrules for Platform Dashboard Development

## General Rules
1. Every significant step must be logged in `documentation/progress-tracker.md` and checked off when completed.
2. All changes should align with the plans outlined in `documentation/planfornextphases.md` or justified updates must be documented.
3. Document deviations or challenges in both plan and tracker files.
4. Update all relevant documentation files to reflect architectural changes or new features.
5. Create documentation for future maintainers.

## Unified Architecture Rules (Completed Migration Phase)
6. No Vite or separate frontend dev server should remain.
7. All configuration must be centralized in `conf/config.ini` and read by the backend.
8. The backend must serve all frontend static files and handle SPA routing correctly.
9. API endpoints must be prefixed with `/api`.
10. Frontend must fetch configuration from the backend.
11. All backend paths requiring absolute resolution (e.g., for `sendFile`) must use `path.resolve()`. Use `path.join()` for constructing relative paths to ensure cross-platform compatibility.

## Code Quality Rules
12. Use consistent error handling.
13. Maintain backward compatibility where feasible.
14. Provide sensible fallback values for configuration.
15. Maintain TypeScript type safety in the frontend.
16. Handle edge cases (missing config, empty data).

## Testing Rules 
17. Test each component/feature individually before integration.
18. Verify frontend routing works for direct URL access.
19. Verify all API endpoints function correctly with proper authentication/authorization.
20. Test with different configuration values.
21. Document testing procedures and results in the progress tracker or related logs.

## Environment Support
22. Ensure compatibility with both development and production environments.
23. Maintain a straightforward development workflow.
24. Ensure the solution works in Windows, macOS, and Linux.

## AI Integration Rules (Phase 3+)
25. Backend service for Ollama interaction must be modular (`ollamaService.js`).
26. API routes for Ollama must be grouped (`/api/ollama/*`) and properly authenticated/authorized (admin vs. user).
27. Admin UI for Ollama settings must validate input and test connection before saving.
28. Model synchronization must handle errors gracefully (e.g., Ollama server unavailable).
29. Chat interaction must use the `/api/chat` endpoint and handle conversation history correctly.
30. Sensitive connection details (if any beyond host/port) should not be logged excessively.
31. Update database schema documentation (`DatabaseStructure.md`) for any AI-related changes.
32. Ensure AI model selection in the chat UI only shows active models from the database.
33. Document the AI integration workflow and troubleshooting steps (`ai_integration.md`, `ollama-integration.md`, `FAQ.md`).
34. Test AI chat functionality thoroughly, including different models, long conversations, and error conditions.

# Update Rules
35. Keep this rules file up to date as the project evolves. 